require ("utils.cgi_env")joson = require("json")require "luasql.mysql"mysql = luasql.mysql()connMy, serr = mysql:connect("molinetes","root", "pirulo","172.17.0.56")tc = {}function unescape (s)	local s = string.gsub(s, "+", " ")	s = string.gsub(s, "%%(%x%x)", function (h)		tc[#tc+1] = h		local c = string.char(tonumber(h, 16))		tc[#tc+1] = c		return c	end)	tc[#tc+1] = s:len()	return s, s:len()endif __FORM.query == nil then	__FORM.query = arg[1]endlocal name = __FORM.querylocal retData = {}retData.query, retData.qlen = unescape(__FORM.query)--retData.query = __FORM.queryretData.qlen = retData.query:len()retData.tc = tcretData.cq = ""retData.arg = agrfor i=1, name:len() do	local c = name:sub(i,i)	retData.cq = retData.cq..c.."="..c:byte()..","end--retData.query = string.gsub(retData.query,"%%C3%%B1","ñ")retData.suggestions = {}retData.data = {}retData.res = {}--retData.env = __ENVlocal sep = ""if retData.query then--	local sql = string.format("SELECT Id, Apellidos, Nombres FROM personas WHERE CONCAT(Apellidos, ' ', Nombres) LIKE '%%%s%%' ORDER BY Apellidos, Nombres",  string.escape(retData.query))--	local sql = string.format("SELECT Id, CONCAT(Apellido, ' ', Nombre) As Apellido, NumeroDocumento FROM Ciudadanos WHERE LEFT(CONCAT(Apellido, ' ', Nombre),%s)='%s' ORDER BY Apellido, Nombre",  retData.qlen, retData.query)--	local sql = string.format("SELECT Id, CONCAT(TRIM(Apellidos), ' ', TRIM(Nombres)) As Apellido, nrodoc, (SELECT data from fotos where fotos.id=id) foto FROM personas WHERE LEFT(CONCAT(TRIM(Apellidos), ' ', TRIM(Nombres)),%s)='%s' ORDER BY Apellidos, Nombres",  retData.qlen, retData.query)	local sql = string.format([[	SELECT Id, 		TRIM(CONCAT(TRIM(Apellidos), ' ', TRIM(Nombres))) As Apellido, 		(SELECT code FROM tpdoc WHERE id=personas.tpdoc) AS tpdoc, 		nrodoc, 		nacio, 		char_LENGTH('%s') AS Largo 	FROM personas 	WHERE LEFT(CONCAT(TRIM(Apellidos), ' ', TRIM(Nombres)),char_LENGTH('%s'))='%s' 	ORDER BY Apellidos, Nombres limit 30	]], retData.query, retData.query, retData.query)	pepe = io.open("/tmp/pepe.txt", "w")	pepe:write(sql)	pepe:close()	local cur, serr = connMy:execute(sql)	retData.Error = serr--	retData.cur = cur	retData.sql = sql	if not serr then		local row = cur:fetch ({}, "a")		while row do			retData.suggestions[#retData.suggestions+1] = row.Apellido.."<br>"..row.tpdoc..": "..row.nrodoc.."<br>"..row.nacio			retData.data[#retData.data+1] = row.Id			retData.res[#retData.res+1] = row			row = cur:fetch ({}, "a")		end		cur:close()--	else	endendconnMy:close()io.write("Contetnt-Type: text/xml; charset=UTF-8\r\n")io.write("Status: 200\r\n")io.write("\r\n")io.write(json.encode(retData))io.write("\r\n")os.exit(0)